// This file was generated by counterfeiter
package fakes

import "sync"

type Client struct {
	AllowStub        func(guid1, guid2, token string) error
	allowMutex       sync.RWMutex
	allowArgsForCall []struct {
		guid1 string
		guid2 string
		token string
	}
	allowReturns struct {
		result1 error
	}
	invocations map[string][][]interface{}
}

func (fake *Client) Allow(guid1 string, guid2 string, token string) error {
	fake.allowMutex.Lock()
	fake.allowArgsForCall = append(fake.allowArgsForCall, struct {
		guid1 string
		guid2 string
		token string
	}{guid1, guid2, token})
	fake.guard("Allow")
	fake.invocations["Allow"] = append(fake.invocations["Allow"], []interface{}{guid1, guid2, token})
	fake.allowMutex.Unlock()
	if fake.AllowStub != nil {
		return fake.AllowStub(guid1, guid2, token)
	} else {
		return fake.allowReturns.result1
	}
}

func (fake *Client) AllowCallCount() int {
	fake.allowMutex.RLock()
	defer fake.allowMutex.RUnlock()
	return len(fake.allowArgsForCall)
}

func (fake *Client) AllowArgsForCall(i int) (string, string, string) {
	fake.allowMutex.RLock()
	defer fake.allowMutex.RUnlock()
	return fake.allowArgsForCall[i].guid1, fake.allowArgsForCall[i].guid2, fake.allowArgsForCall[i].token
}

func (fake *Client) AllowReturns(result1 error) {
	fake.AllowStub = nil
	fake.allowReturns = struct {
		result1 error
	}{result1}
}

func (fake *Client) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *Client) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}
